/*
 * EditorTextoFrame.java
 */

package editortexto;

import application.Action;
import application.ApplicationContext;
import application.ResourceMap;
import application.Task;
import java.awt.Color;
import java.awt.Desktop.Action;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.io.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import org.jdesktop.application.ApplicationContext;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;

/**
 * The main frame of the application.
 */
public class EditorTextoFrame extends javax.swing.JFrame {
    
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    
    private JDialog aboutBox;
    
    public EditorTextoFrame() {
        initComponents();
        
        // status bar initialization
        ResourceMap resourceMap = ApplicationContext.getInstance().getResourceMap(EditorTextoFrame.class);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);
    }
    
    @Action public Task create() {
        return new DoNothing();
    }
    
    @Action public void open() {
    }
    
    @Action public Task saveAs() {
        return new DoNothing();
    }
    
    @Action public void cut() {
    }
    
    @application.Action public void copy() {
    }
    
    @Action public Task paste() {
        return new DoNothing();
    }
    
    @Action public Task delete() {
        return new DoNothing();
    }
    
    @Action public Task save() {
        return new DoNothing();
    }
    
    @Action public void showAboutBox(ActionEvent e) {
        if (aboutBox == null) {
            aboutBox = new EditorTextoAboutBox(this);
            aboutBox.setLocationRelativeTo(this);
        }
        EditorTextoApp.getApplication().show(aboutBox);
    }
    
    /**
     * An example task showing how to create tasks for asynchronous actions
     * running on background and indicating their progress.
     */
    private class DoNothing extends Task<Void, Void> {
        @Override protected Void doInBackground() {
            try {
                for(int i = 0; i < 10; i++) {
                    setMessage("Processando... [" + i + "]");
                    Thread.sleep(150L);
                    setProgress(i, 0, 9);
                }
                Thread.sleep(150L);
            } catch(InterruptedException ignore) { }
            return null;
        }
        @Override
        protected void finished() {
            setMessage("Pronto.");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskMonitor = new application.TaskMonitor();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        toolBar = new javax.swing.JToolBar();
        javax.swing.JButton createToolBarButton = new javax.swing.JButton();
        javax.swing.JButton openToolBarButton = new javax.swing.JButton();
        javax.swing.JButton saveToolBarButton = new javax.swing.JButton();
        cutToolBarButton = new javax.swing.JButton();
        copyToolBarButton = new javax.swing.JButton();
        pasteToolBarButton = new javax.swing.JButton();
        localizarButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                taskMonitorPropertyChange(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("title")); // NOI18N
        setName("mainFrame"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 657, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        jEditorPane1.setFont(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getFont("jEditorPane1.font")); // NOI18N
        jEditorPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jEditorPane1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jEditorPane1);

        toolBar.setRollover(true);

        createToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("create"));
        createToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("createToolBarButton.text")); // NOI18N
        createToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("createToolBarButton.toolTipText")); // NOI18N
        createToolBarButton.setFocusable(false);
        createToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        createToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(createToolBarButton);

        openToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("open"));
        openToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("openToolBarButton.text")); // NOI18N
        openToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("openToolBarButton.toolTipText")); // NOI18N
        openToolBarButton.setFocusable(false);
        openToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(openToolBarButton);

        saveToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("save"));
        saveToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("saveToolBarButton.text")); // NOI18N
        saveToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("saveToolBarButton.toolTipText")); // NOI18N
        saveToolBarButton.setFocusable(false);
        saveToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(saveToolBarButton);

        cutToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("cut"));
        cutToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("cutToolBarButton.text")); // NOI18N
        cutToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("cutToolBarButton.toolTipText")); // NOI18N
        cutToolBarButton.setFocusable(false);
        cutToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cutToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cutToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cutToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(cutToolBarButton);
        cutToolBarButton.getAccessibleContext().setAccessibleDescription(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("cutToolBarButton.AccessibleContext.accessibleDescription")); // NOI18N

        copyToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("copy"));
        copyToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.text")); // NOI18N
        copyToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("copyToolBarButton.toolTipText")); // NOI18N
        copyToolBarButton.setFocusable(false);
        copyToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(copyToolBarButton);
        copyToolBarButton.getAccessibleContext().setAccessibleDescription(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.AccessibleContext.accessibleDescription")); // NOI18N

        pasteToolBarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("paste"));
        pasteToolBarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.text")); // NOI18N
        pasteToolBarButton.setToolTipText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.toolTipText")); // NOI18N
        pasteToolBarButton.setFocusable(false);
        pasteToolBarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteToolBarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pasteToolBarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasteToolBarButtonMouseClicked(evt);
            }
        });
        toolBar.add(pasteToolBarButton);

        localizarButton.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("localizar"));
        localizarButton.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("localizarButton.text")); // NOI18N
        localizarButton.setFocusable(false);
        localizarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        localizarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        localizarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                localizarButtonMouseClicked(evt);
            }
        });
        toolBar.add(localizarButton);
        localizarButton.getAccessibleContext().setAccessibleName(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("localizarButton.AccessibleContext.accessibleName")); // NOI18N
        localizarButton.getAccessibleContext().setAccessibleDescription(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("localizarButton.AccessibleContext.accessibleDescription")); // NOI18N

        jTextField1.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jTextField1.text")); // NOI18N

        jTextField2.setText(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jTextField2.text")); // NOI18N

        jButton1.setAction(application.ApplicationContext.getInstance().getActionMap(EditorTextoFrame.class, this).get("substituir"));
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(toolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(toolBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton1))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
        );

        jButton1.getAccessibleContext().setAccessibleName(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.AccessibleContext.accessibleName")); // NOI18N
        jButton1.getAccessibleContext().setAccessibleDescription(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("jButton1.AccessibleContext.accessibleDescription")); // NOI18N

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleName(application.ApplicationContext.getInstance().getResourceMap(editortexto.EditorTextoFrame.class).getString("AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    
private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    String texto = jEditorPane1.getText();
    String replace = jTextField2.getText();
    String nova = texto.replaceAll(jTextField1.getText(), replace);
    jEditorPane1.setText(nova);
}//GEN-LAST:event_jButton1MouseClicked
    
private void jEditorPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jEditorPane1FocusGained
    Highlighter hilite = jEditorPane1.getHighlighter();
    hilite.removeAllHighlights();
}//GEN-LAST:event_jEditorPane1FocusGained


/**
 * Este método localiza uma substrig na string contida no jEditorPane e grifa de amarelo todas
 * ocorrências encontradas. Utiliza a idéia do KMP
 * 
 */
private void localizarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_localizarButtonMouseClicked
    String texto = jEditorPane1.getText();
    String padrao = jTextField1.getText();
    Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.yellow);
    Highlighter hilite = jEditorPane1.getHighlighter();
    hilite.removeAllHighlights();
    
    int pos = 0;
    if(padrao.length() > 0) {
        while(( pos = texto.indexOf(padrao, pos)) >= 0) {
            try{
                hilite.addHighlight(pos,  pos + padrao.length(), myHighlightPainter);
            }catch (BadLocationException e) {
            }
            pos += padrao.length();
        }
    }
}//GEN-LAST:event_localizarButtonMouseClicked

private void cutToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cutToolBarButtonMouseClicked
    jEditorPane1.cut();
}//GEN-LAST:event_cutToolBarButtonMouseClicked

private void pasteToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasteToolBarButtonMouseClicked
    jEditorPane1.paste();
}//GEN-LAST:event_pasteToolBarButtonMouseClicked

private void copyToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyToolBarButtonMouseClicked
    jEditorPane1.copy();
}//GEN-LAST:event_copyToolBarButtonMouseClicked

private void saveFile() {
    JFileChooser arquivo = new JFileChooser();
    arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
    
    int result = arquivo.showSaveDialog(this);
    
    //Se o usuario cancelar
    if(result == JFileChooser.CANCEL_OPTION) {
        return;
    }
    //obtem um arquivo selecionado
    File nomedoarquivo = arquivo.getSelectedFile();
    //exibe erro se invalido
    if(nomedoarquivo == null ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".doc") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".xls") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".odt") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".pdf")) {
        JOptionPane.showMessageDialog(this, "Formato de arquivo invalido", "Erro 01", JOptionPane.ERROR_MESSAGE);
    } else if(nomedoarquivo == null ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".jpg") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".gif") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-5, nomedoarquivo.getName().length()).equals(".jpeg") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".pgn")) {
        JOptionPane.showMessageDialog(this, "Formato de aquivo invalido\nEste programa nao manipula imagens.", "Erro 02", JOptionPane.ERROR_MESSAGE);
    } else if(nomedoarquivo.exists()) {
        int janela = JOptionPane.showConfirmDialog(this, "Deseja sobrescrever o arquivo?", "Alerta!", JOptionPane.CANCEL_OPTION);
        if(JOptionPane.OK_OPTION == janela) {
            if(nomedoarquivo.isFile()) {
                nomedoarquivo.delete();
            }
            try {
                RandomAccessFile file = new RandomAccessFile(nomedoarquivo, "rw" );
                StringBuffer buf = new StringBuffer(jEditorPane1.getText());
                file.write(buf.toString().getBytes());
                file.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro! Nao foi possivel salvar o arquivo", "Erro 04", JOptionPane.ERROR_MESSAGE);
            }
        } else if(JOptionPane.CANCEL_OPTION == janela) {
            return;
        }
    } else {
        try {
            RandomAccessFile file = new RandomAccessFile(nomedoarquivo, "rw" );
            StringBuffer buf = new StringBuffer(jEditorPane1.getText());
            file.write(buf.toString().getBytes());
            file.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro! Nao foi possivel salvar o arquivo", "Erro 04", JOptionPane.ERROR_MESSAGE);
        }
    }
}

private void newFile() {
    int janela = JOptionPane.showConfirmDialog(this, "Deseja salvar o arquivo atual?", "Alerta!", JOptionPane.CANCEL_OPTION);
    if(JOptionPane.OK_OPTION == janela) {
        saveFile();
    } else if(JOptionPane.CANCEL_OPTION == janela) {
        jEditorPane1.setText("");
    }
    jEditorPane1.setText("");
}

private void openFile() {
    JFileChooser arquivo = new JFileChooser();
    arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
    
    int result = arquivo.showOpenDialog(this);
    
    //Se o usuario cancelar
    if(result == JFileChooser.CANCEL_OPTION) {
        return;
    }
    
    //obtem o arquivo selecionado
    File nomedoarquivo = arquivo.getSelectedFile();
    
    //exibe erro se invalido
    if(nomedoarquivo == null ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".doc") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".xls") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".odt") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".pdf")) {
        JOptionPane.showMessageDialog(this, "Formato de arquivo invalido", "Erro 01", JOptionPane.ERROR_MESSAGE);
    } else if(nomedoarquivo == null ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".jpg") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".gif") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-5, nomedoarquivo.getName().length()).equals(".jpeg") ||
            nomedoarquivo.getName().substring(nomedoarquivo.getName().length()-4, nomedoarquivo.getName().length()).equals(".pgn")) {
        JOptionPane.showMessageDialog(this, "Formato de aquivo invalido\nEste programa nao manipula imagens.", "Erro 02", JOptionPane.ERROR_MESSAGE);
    } else {
        //abre o arquivos
        try {
            
            FileInputStream isTwo = new FileInputStream(""+nomedoarquivo.getPath());
            BufferedInputStream  in = new BufferedInputStream(isTwo);
            StringBuffer sb = new StringBuffer();
            
            while(in.available() != 0) {
                sb.append((char)in.read());
            }
            in.close();
            isTwo.close();
            jEditorPane1.setText(sb.toString());
            
            
        } catch(IOException ioException) {
            JOptionPane.showMessageDialog(this, "Falha ao abrir o arquivo!\nVerifique se existe algum problema com o arquivo selecionado", "Erro 03", JOptionPane.ERROR_MESSAGE);
        }
    }
}

private void createToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createToolBarButtonMouseClicked
    newFile();
}//GEN-LAST:event_createToolBarButtonMouseClicked

private void saveToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveToolBarButtonMouseClicked
    saveFile();
}//GEN-LAST:event_saveToolBarButtonMouseClicked

private void openToolBarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openToolBarButtonMouseClicked
    openFile();
}//GEN-LAST:event_openToolBarButtonMouseClicked

    private void taskMonitorPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_taskMonitorPropertyChange
        String propertyName = evt.getPropertyName();
        if ("started".equals(propertyName)) {
            if (!busyIconTimer.isRunning()) {
                statusAnimationLabel.setIcon(busyIcons[0]);
                busyIconIndex = 0;
                busyIconTimer.start();
            }
            progressBar.setVisible(true);
            progressBar.setIndeterminate(true);
        } else if ("done".equals(propertyName)) {
            busyIconTimer.stop();
            statusAnimationLabel.setIcon(idleIcon);
            progressBar.setVisible(false);
            progressBar.setValue(0);
        } else if ("message".equals(propertyName)) {
            String text = (String)(evt.getNewValue());
            statusMessageLabel.setText((text == null) ? "" : text);
        } else if ("progress".equals(propertyName)) {
            int value = (Integer)(evt.getNewValue());
            progressBar.setVisible(true);
            progressBar.setIndeterminate(false);
            progressBar.setValue(value);
        }
    }//GEN-LAST:event_taskMonitorPropertyChange
    
    @application.Action
    public void localizar() {
        // put your action code here
    }

    @application.Action
    public void substituir() {
        // put your action code here
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyToolBarButton;
    private javax.swing.JButton cutToolBarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton localizarButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton pasteToolBarButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private application.TaskMonitor taskMonitor;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    
    class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
        public MyHighlightPainter(Color color) {
            super(color);
        }
    }
    
    
}

